
My_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  000005d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d3  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f7  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0e  00000000  00000000  000026b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  000032c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c5  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab8  00000000  00000000  00003e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)	
{	
	
	H_Lcd_Init();
  92:	0e 94 d6 00 	call	0x1ac	; 0x1ac <H_Lcd_Init>
	
	H_Lcd_WriteCharacter('M');
  96:	8d e4       	ldi	r24, 0x4D	; 77
  98:	0e 94 58 00 	call	0xb0	; 0xb0 <H_Lcd_WriteCharacter>
	H_Lcd_WriteCharacter('A');
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 58 00 	call	0xb0	; 0xb0 <H_Lcd_WriteCharacter>
	H_Lcd_WriteCharacter('M');
  a2:	8d e4       	ldi	r24, 0x4D	; 77
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <H_Lcd_WriteCharacter>
	H_Lcd_WriteCharacter('A');
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 58 00 	call	0xb0	; 0xb0 <H_Lcd_WriteCharacter>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x1c>

000000b0 <H_Lcd_WriteCharacter>:
	#endif
}


void H_Lcd_WriteCharacter(u8 Local_u8_Character)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(LCD_DELAY_TIME);	
	M_Dio_PinWrite(LCD_EN_PIN,LOW);	
	_delay_ms(LCD_SMALL_DELAY);
	#elif		LCD_MODE	==   _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	85 e1       	ldi	r24, 0x15	; 21
  b8:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
	LCD_DATA_PORT=(Local_u8_Character &0xF0) | (LCD_DATA_PORT&0x0F);
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	9c 2f       	mov	r25, r28
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	89 2b       	or	r24, r25
  c6:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	86 e1       	ldi	r24, 0x16	; 22
  cc:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e9       	ldi	r24, 0x9F	; 159
  d2:	9f e0       	ldi	r25, 0x0F	; 15
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <H_Lcd_WriteCharacter+0x24>
  d8:	00 c0       	rjmp	.+0      	; 0xda <H_Lcd_WriteCharacter+0x2a>
  da:	00 00       	nop
	_delay_ms(LCD_DELAY_TIME);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	86 e1       	ldi	r24, 0x16	; 22
  e0:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
  e4:	8f e9       	ldi	r24, 0x9F	; 159
  e6:	9f e0       	ldi	r25, 0x0F	; 15
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <H_Lcd_WriteCharacter+0x38>
  ec:	00 c0       	rjmp	.+0      	; 0xee <H_Lcd_WriteCharacter+0x3e>
  ee:	00 00       	nop
	_delay_ms(LCD_DELAY_TIME);
	LCD_DATA_PORT=(Local_u8_Character << 4)  | (LCD_DATA_PORT&0x0F);
  f0:	2b b3       	in	r18, 0x1b	; 27
  f2:	30 e1       	ldi	r19, 0x10	; 16
  f4:	c3 9f       	mul	r28, r19
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	92 2f       	mov	r25, r18
  fc:	9f 70       	andi	r25, 0x0F	; 15
  fe:	89 2b       	or	r24, r25
 100:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	86 e1       	ldi	r24, 0x16	; 22
 106:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
 10a:	8f e9       	ldi	r24, 0x9F	; 159
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <H_Lcd_WriteCharacter+0x5e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <H_Lcd_WriteCharacter+0x64>
 114:	00 00       	nop
	_delay_ms(LCD_DELAY_TIME);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	86 e1       	ldi	r24, 0x16	; 22
 11a:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <H_Lcd_WriteCharacter+0x72>
 126:	00 c0       	rjmp	.+0      	; 0x128 <H_Lcd_WriteCharacter+0x78>
 128:	00 00       	nop
	_delay_ms(LCD_SMALL_DELAY);
	#endif
}
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <H_Lcd_WriteCommand>:

void H_Lcd_WriteCommand(u8 Local_u8_Command)
{
 12e:	cf 93       	push	r28
 130:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(LCD_DELAY_TIME);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(LCD_SMALL_DELAY);
	#elif		LCD_MODE	==   _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	85 e1       	ldi	r24, 0x15	; 21
 136:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
	LCD_DATA_PORT=(Local_u8_Command &0xF0) | (LCD_DATA_PORT&0x0F);
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	9c 2f       	mov	r25, r28
 13e:	90 7f       	andi	r25, 0xF0	; 240
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	89 2b       	or	r24, r25
 144:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	86 e1       	ldi	r24, 0x16	; 22
 14a:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <H_Lcd_WriteCommand+0x24>
 156:	00 c0       	rjmp	.+0      	; 0x158 <H_Lcd_WriteCommand+0x2a>
 158:	00 00       	nop
	_delay_ms(LCD_DELAY_TIME);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	86 e1       	ldi	r24, 0x16	; 22
 15e:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <H_Lcd_WriteCommand+0x38>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <H_Lcd_WriteCommand+0x3e>
 16c:	00 00       	nop
	_delay_ms(LCD_DELAY_TIME);
	LCD_DATA_PORT=(Local_u8_Command << 4)  | (LCD_DATA_PORT&0x0F);
 16e:	2b b3       	in	r18, 0x1b	; 27
 170:	30 e1       	ldi	r19, 0x10	; 16
 172:	c3 9f       	mul	r28, r19
 174:	c0 01       	movw	r24, r0
 176:	11 24       	eor	r1, r1
 178:	92 2f       	mov	r25, r18
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	89 2b       	or	r24, r25
 17e:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	86 e1       	ldi	r24, 0x16	; 22
 184:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
 188:	8f e9       	ldi	r24, 0x9F	; 159
 18a:	9f e0       	ldi	r25, 0x0F	; 15
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <H_Lcd_WriteCommand+0x5e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <H_Lcd_WriteCommand+0x64>
 192:	00 00       	nop
	_delay_ms(LCD_DELAY_TIME);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	86 e1       	ldi	r24, 0x16	; 22
 198:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
 19c:	8f e1       	ldi	r24, 0x1F	; 31
 19e:	9e e4       	ldi	r25, 0x4E	; 78
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <H_Lcd_WriteCommand+0x72>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <H_Lcd_WriteCommand+0x78>
 1a6:	00 00       	nop
	_delay_ms(LCD_SMALL_DELAY);
	#endif
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <H_Lcd_Init>:
	H_Lcd_WriteCommand(LCD_CLR);
	H_Lcd_WriteCommand(LCD_DISABLE_ON_CURSUR_OFF); 
	H_Lcd_WriteCommand(LCD_CLR);
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
	#elif	LCD_MODE      ==	_4_BIT_MODE
	M_Dio_PinMode(LCD_DATA4_PIN,OUTPUT);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	8e e0       	ldi	r24, 0x0E	; 14
 1b0:	0e 94 26 01 	call	0x24c	; 0x24c <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA5_PIN,OUTPUT);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	0e 94 26 01 	call	0x24c	; 0x24c <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA6_PIN,OUTPUT);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	0e 94 26 01 	call	0x24c	; 0x24c <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA7_PIN,OUTPUT);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	81 e1       	ldi	r24, 0x11	; 17
 1c8:	0e 94 26 01 	call	0x24c	; 0x24c <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	85 e1       	ldi	r24, 0x15	; 21
 1d0:	0e 94 26 01 	call	0x24c	; 0x24c <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	86 e1       	ldi	r24, 0x16	; 22
 1d8:	0e 94 26 01 	call	0x24c	; 0x24c <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	87 e1       	ldi	r24, 0x17	; 23
 1e0:	0e 94 26 01 	call	0x24c	; 0x24c <M_Dio_PinMode>
	M_Dio_PinWrite(LCD_RW_PIN,LOW);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	87 e1       	ldi	r24, 0x17	; 23
 1e8:	0e 94 af 01 	call	0x35e	; 0x35e <M_Dio_PinWrite>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	83 ed       	ldi	r24, 0xD3	; 211
 1f0:	90 e3       	ldi	r25, 0x30	; 48
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <H_Lcd_Init+0x46>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <H_Lcd_Init+0x50>
 1fc:	00 00       	nop
	_delay_ms(LCD_LONG_DELAY);
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_1);
 1fe:	83 e3       	ldi	r24, 0x33	; 51
 200:	0e 94 97 00 	call	0x12e	; 0x12e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_2);
 204:	82 e3       	ldi	r24, 0x32	; 50
 206:	0e 94 97 00 	call	0x12e	; 0x12e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_3);
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	0e 94 97 00 	call	0x12e	; 0x12e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_DISABLE_ON_CURSUR_OFF);
 210:	8c e0       	ldi	r24, 0x0C	; 12
 212:	0e 94 97 00 	call	0x12e	; 0x12e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CLR);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 97 00 	call	0x12e	; 0x12e <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	0e 94 97 00 	call	0x12e	; 0x12e <H_Lcd_WriteCommand>
 222:	08 95       	ret

00000224 <__vector_16>:
	CallBack_Adc = ptr;
}
*/

ISR(ADC_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
	
	x=ADC_VALUE;
 232:	84 b1       	in	r24, 0x04	; 4
 234:	95 b1       	in	r25, 0x05	; 5
 236:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	//CallBack_Adc();
	
}
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <M_Dio_PinMode>:
/***********************************_INCLUDES_***********************************/
#include "Dio.h"
/***********************************_FUNCTIONS_*********************************/
void M_Dio_PinMode(u8 Local_u8_Num, u8 Local_u8_Mode)
{
	u8 Local_u8_Pin=Local_u8_Num %10;//models
 24c:	9d ec       	ldi	r25, 0xCD	; 205
 24e:	89 9f       	mul	r24, r25
 250:	91 2d       	mov	r25, r1
 252:	11 24       	eor	r1, r1
 254:	29 2f       	mov	r18, r25
 256:	26 95       	lsr	r18
 258:	26 95       	lsr	r18
 25a:	26 95       	lsr	r18
 25c:	22 0f       	add	r18, r18
 25e:	32 2f       	mov	r19, r18
 260:	33 0f       	add	r19, r19
 262:	33 0f       	add	r19, r19
 264:	23 0f       	add	r18, r19
 266:	82 1b       	sub	r24, r18
 268:	28 2f       	mov	r18, r24
	u8 Local_u8_Port=Local_u8_Num /10;
 26a:	96 95       	lsr	r25
 26c:	96 95       	lsr	r25
 26e:	96 95       	lsr	r25
	
	switch(Local_u8_Mode)
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	19 f0       	breq	.+6      	; 0x27a <M_Dio_PinMode+0x2e>
 274:	62 30       	cpi	r22, 0x02	; 2
 276:	c1 f1       	breq	.+112    	; 0x2e8 <M_Dio_PinMode+0x9c>
 278:	08 95       	ret
	{
		case OUTPUT:
				switch(Local_u8_Port)
 27a:	92 30       	cpi	r25, 0x02	; 2
 27c:	a1 f0       	breq	.+40     	; 0x2a6 <M_Dio_PinMode+0x5a>
 27e:	18 f4       	brcc	.+6      	; 0x286 <M_Dio_PinMode+0x3a>
 280:	91 30       	cpi	r25, 0x01	; 1
 282:	31 f0       	breq	.+12     	; 0x290 <M_Dio_PinMode+0x44>
 284:	08 95       	ret
 286:	93 30       	cpi	r25, 0x03	; 3
 288:	c9 f0       	breq	.+50     	; 0x2bc <M_Dio_PinMode+0x70>
 28a:	94 30       	cpi	r25, 0x04	; 4
 28c:	11 f1       	breq	.+68     	; 0x2d2 <M_Dio_PinMode+0x86>
 28e:	08 95       	ret
				{
					case 1: SET_BIT(DDRA,Local_u8_Pin);break;
 290:	3a b3       	in	r19, 0x1a	; 26
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <M_Dio_PinMode+0x50>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	2a 95       	dec	r18
 29e:	e2 f7       	brpl	.-8      	; 0x298 <M_Dio_PinMode+0x4c>
 2a0:	83 2b       	or	r24, r19
 2a2:	8a bb       	out	0x1a, r24	; 26
 2a4:	08 95       	ret
					case 2: SET_BIT(DDRB,Local_u8_Pin);break;
 2a6:	37 b3       	in	r19, 0x17	; 23
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <M_Dio_PinMode+0x66>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <M_Dio_PinMode+0x62>
 2b6:	83 2b       	or	r24, r19
 2b8:	87 bb       	out	0x17, r24	; 23
 2ba:	08 95       	ret
					case 3: SET_BIT(DDRC,Local_u8_Pin);break;
 2bc:	34 b3       	in	r19, 0x14	; 20
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <M_Dio_PinMode+0x7c>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	2a 95       	dec	r18
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <M_Dio_PinMode+0x78>
 2cc:	83 2b       	or	r24, r19
 2ce:	84 bb       	out	0x14, r24	; 20
 2d0:	08 95       	ret
					case 4: SET_BIT(DDRD,Local_u8_Pin);break;
 2d2:	31 b3       	in	r19, 0x11	; 17
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <M_Dio_PinMode+0x92>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	2a 95       	dec	r18
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <M_Dio_PinMode+0x8e>
 2e2:	83 2b       	or	r24, r19
 2e4:	81 bb       	out	0x11, r24	; 17
 2e6:	08 95       	ret
					
				}break;
				
				
		case INPUT:
		switch(Local_u8_Port)
 2e8:	92 30       	cpi	r25, 0x02	; 2
 2ea:	a9 f0       	breq	.+42     	; 0x316 <M_Dio_PinMode+0xca>
 2ec:	18 f4       	brcc	.+6      	; 0x2f4 <M_Dio_PinMode+0xa8>
 2ee:	91 30       	cpi	r25, 0x01	; 1
 2f0:	31 f0       	breq	.+12     	; 0x2fe <M_Dio_PinMode+0xb2>
 2f2:	08 95       	ret
 2f4:	93 30       	cpi	r25, 0x03	; 3
 2f6:	d9 f0       	breq	.+54     	; 0x32e <M_Dio_PinMode+0xe2>
 2f8:	94 30       	cpi	r25, 0x04	; 4
 2fa:	29 f1       	breq	.+74     	; 0x346 <M_Dio_PinMode+0xfa>
 2fc:	08 95       	ret
		{
			case 1: CLR_BIT(DDRA,Local_u8_Pin);break;
 2fe:	3a b3       	in	r19, 0x1a	; 26
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <M_Dio_PinMode+0xbe>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	2a 95       	dec	r18
 30c:	e2 f7       	brpl	.-8      	; 0x306 <M_Dio_PinMode+0xba>
 30e:	80 95       	com	r24
 310:	83 23       	and	r24, r19
 312:	8a bb       	out	0x1a, r24	; 26
 314:	08 95       	ret
			case 2: CLR_BIT(DDRB,Local_u8_Pin);break;
 316:	37 b3       	in	r19, 0x17	; 23
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <M_Dio_PinMode+0xd6>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	2a 95       	dec	r18
 324:	e2 f7       	brpl	.-8      	; 0x31e <M_Dio_PinMode+0xd2>
 326:	80 95       	com	r24
 328:	83 23       	and	r24, r19
 32a:	87 bb       	out	0x17, r24	; 23
 32c:	08 95       	ret
			case 3: CLR_BIT(DDRC,Local_u8_Pin);break;
 32e:	34 b3       	in	r19, 0x14	; 20
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <M_Dio_PinMode+0xee>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	2a 95       	dec	r18
 33c:	e2 f7       	brpl	.-8      	; 0x336 <M_Dio_PinMode+0xea>
 33e:	80 95       	com	r24
 340:	83 23       	and	r24, r19
 342:	84 bb       	out	0x14, r24	; 20
 344:	08 95       	ret
			case 4: CLR_BIT(DDRD,Local_u8_Pin);break;
 346:	31 b3       	in	r19, 0x11	; 17
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <M_Dio_PinMode+0x106>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	2a 95       	dec	r18
 354:	e2 f7       	brpl	.-8      	; 0x34e <M_Dio_PinMode+0x102>
 356:	80 95       	com	r24
 358:	83 23       	and	r24, r19
 35a:	81 bb       	out	0x11, r24	; 17
 35c:	08 95       	ret

0000035e <M_Dio_PinWrite>:


void M_Dio_PinWrite(u8 Local_u8_Num,u8 Local_u8_Mode)
{
	
	u8 Local_u8_Pin=Local_u8_Num %10;//models
 35e:	9d ec       	ldi	r25, 0xCD	; 205
 360:	89 9f       	mul	r24, r25
 362:	91 2d       	mov	r25, r1
 364:	11 24       	eor	r1, r1
 366:	29 2f       	mov	r18, r25
 368:	26 95       	lsr	r18
 36a:	26 95       	lsr	r18
 36c:	26 95       	lsr	r18
 36e:	22 0f       	add	r18, r18
 370:	32 2f       	mov	r19, r18
 372:	33 0f       	add	r19, r19
 374:	33 0f       	add	r19, r19
 376:	23 0f       	add	r18, r19
 378:	82 1b       	sub	r24, r18
 37a:	28 2f       	mov	r18, r24
	u8 Local_u8_Port=Local_u8_Num /10;
 37c:	96 95       	lsr	r25
 37e:	96 95       	lsr	r25
 380:	96 95       	lsr	r25
	
	switch(Local_u8_Mode)
 382:	66 23       	and	r22, r22
 384:	d1 f1       	breq	.+116    	; 0x3fa <M_Dio_PinWrite+0x9c>
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	09 f0       	breq	.+2      	; 0x38c <M_Dio_PinWrite+0x2e>
 38a:	71 c0       	rjmp	.+226    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		case HIGH:
		switch(Local_u8_Port)
 38c:	92 30       	cpi	r25, 0x02	; 2
 38e:	a1 f0       	breq	.+40     	; 0x3b8 <M_Dio_PinWrite+0x5a>
 390:	18 f4       	brcc	.+6      	; 0x398 <M_Dio_PinWrite+0x3a>
 392:	91 30       	cpi	r25, 0x01	; 1
 394:	31 f0       	breq	.+12     	; 0x3a2 <M_Dio_PinWrite+0x44>
 396:	08 95       	ret
 398:	93 30       	cpi	r25, 0x03	; 3
 39a:	c9 f0       	breq	.+50     	; 0x3ce <M_Dio_PinWrite+0x70>
 39c:	94 30       	cpi	r25, 0x04	; 4
 39e:	11 f1       	breq	.+68     	; 0x3e4 <M_Dio_PinWrite+0x86>
 3a0:	08 95       	ret
		{
			case 1: SET_BIT(PORTA,Local_u8_Pin);break;
 3a2:	3b b3       	in	r19, 0x1b	; 27
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <M_Dio_PinWrite+0x50>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	2a 95       	dec	r18
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <M_Dio_PinWrite+0x4c>
 3b2:	83 2b       	or	r24, r19
 3b4:	8b bb       	out	0x1b, r24	; 27
 3b6:	08 95       	ret
			case 2: SET_BIT(PORTB,Local_u8_Pin);break;
 3b8:	38 b3       	in	r19, 0x18	; 24
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <M_Dio_PinWrite+0x66>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	2a 95       	dec	r18
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <M_Dio_PinWrite+0x62>
 3c8:	83 2b       	or	r24, r19
 3ca:	88 bb       	out	0x18, r24	; 24
 3cc:	08 95       	ret
			case 3: SET_BIT(PORTC,Local_u8_Pin);break;
 3ce:	35 b3       	in	r19, 0x15	; 21
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <M_Dio_PinWrite+0x7c>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	2a 95       	dec	r18
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <M_Dio_PinWrite+0x78>
 3de:	83 2b       	or	r24, r19
 3e0:	85 bb       	out	0x15, r24	; 21
 3e2:	08 95       	ret
			case 4: SET_BIT(PORTD,Local_u8_Pin);break;
 3e4:	32 b3       	in	r19, 0x12	; 18
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <M_Dio_PinWrite+0x92>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	2a 95       	dec	r18
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <M_Dio_PinWrite+0x8e>
 3f4:	83 2b       	or	r24, r19
 3f6:	82 bb       	out	0x12, r24	; 18
 3f8:	08 95       	ret
			
		}
		
		break;
		case LOW:
		switch(Local_u8_Port)
 3fa:	92 30       	cpi	r25, 0x02	; 2
 3fc:	a9 f0       	breq	.+42     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3fe:	18 f4       	brcc	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 400:	91 30       	cpi	r25, 0x01	; 1
 402:	31 f0       	breq	.+12     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 404:	08 95       	ret
 406:	93 30       	cpi	r25, 0x03	; 3
 408:	d9 f0       	breq	.+54     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 40a:	94 30       	cpi	r25, 0x04	; 4
 40c:	29 f1       	breq	.+74     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 40e:	08 95       	ret
		{
			case 1: CLR_BIT(PORTA,Local_u8_Pin);break;
 410:	3b b3       	in	r19, 0x1b	; 27
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	2a 95       	dec	r18
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	83 23       	and	r24, r19
 424:	8b bb       	out	0x1b, r24	; 27
 426:	08 95       	ret
			case 2: CLR_BIT(PORTB,Local_u8_Pin);break;
 428:	38 b3       	in	r19, 0x18	; 24
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	2a 95       	dec	r18
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	80 95       	com	r24
 43a:	83 23       	and	r24, r19
 43c:	88 bb       	out	0x18, r24	; 24
 43e:	08 95       	ret
			case 3: CLR_BIT(PORTC,Local_u8_Pin);break;
 440:	35 b3       	in	r19, 0x15	; 21
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	2a 95       	dec	r18
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	83 23       	and	r24, r19
 454:	85 bb       	out	0x15, r24	; 21
 456:	08 95       	ret
			case 4: CLR_BIT(PORTD,Local_u8_Pin);break;
 458:	32 b3       	in	r19, 0x12	; 18
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	2a 95       	dec	r18
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	80 95       	com	r24
 46a:	83 23       	and	r24, r19
 46c:	82 bb       	out	0x12, r24	; 18
 46e:	08 95       	ret

00000470 <__vector_1>:
{
	CallBack_ExtInt = ptr; 
}

ISR(INT0_vect)
{
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	CallBack_ExtInt();
 492:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <CallBack_ExtInt>
 496:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <CallBack_ExtInt+0x1>
 49a:	09 95       	icall
}
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_10>:
		TCNT0			  = 256 - Timer0_u8_RemTicks;
	}
}
#elif TIMER0_MODE == CTC_MODE
ISR(TIMER0_COMP_vect)
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	static  u32 Local_u32_Counter = 0;
	Local_u32_Counter++;
 4e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Local_u32_Counter.1673>
 4e4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Local_u32_Counter.1673+0x1>
 4e8:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <Local_u32_Counter.1673+0x2>
 4ec:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <Local_u32_Counter.1673+0x3>
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	a1 1d       	adc	r26, r1
 4f4:	b1 1d       	adc	r27, r1
 4f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Local_u32_Counter.1673>
 4fa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Local_u32_Counter.1673+0x1>
 4fe:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <Local_u32_Counter.1673+0x2>
 502:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <Local_u32_Counter.1673+0x3>
	if( Local_u32_Counter ==  Timer0_Num_of_CompareMatch)
 506:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <Timer0_Num_of_CompareMatch>
 50a:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <Timer0_Num_of_CompareMatch+0x1>
 50e:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Timer0_Num_of_CompareMatch+0x2>
 512:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Timer0_Num_of_CompareMatch+0x3>
 516:	84 17       	cp	r24, r20
 518:	95 07       	cpc	r25, r21
 51a:	a6 07       	cpc	r26, r22
 51c:	b7 07       	cpc	r27, r23
 51e:	69 f4       	brne	.+26     	; 0x53a <__vector_10+0x7c>
	{
		CallBack_Timer0();
 520:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <CallBack_Timer0>
 524:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <CallBack_Timer0+0x1>
 528:	09 95       	icall
		Local_u32_Counter = 0;
 52a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Local_u32_Counter.1673>
 52e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Local_u32_Counter.1673+0x1>
 532:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Local_u32_Counter.1673+0x2>
 536:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Local_u32_Counter.1673+0x3>
	}
}
 53a:	ff 91       	pop	r31
 53c:	ef 91       	pop	r30
 53e:	bf 91       	pop	r27
 540:	af 91       	pop	r26
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	7f 91       	pop	r23
 548:	6f 91       	pop	r22
 54a:	5f 91       	pop	r21
 54c:	4f 91       	pop	r20
 54e:	3f 91       	pop	r19
 550:	2f 91       	pop	r18
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
